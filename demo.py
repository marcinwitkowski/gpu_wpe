import os
import numpy as np

from nara_wpe.utils import stft, istft
from nara_wpe.wpe import wpe as cpu_wpe
from gpu_wpe import wpe as gpu_wpe
import soundfile as sf

from utils import download_and_unzip

if __name__ == "__main__":
    channels = 8
    sampling_rate = 16000
    delay = 3
    iterations = 3
    taps = 10
    psd_context = 0
    stft_options = dict(size=512, shift=128)

    audio_ami_8ch_zip_url = "https://home.agh.edu.pl/~witkow/audio/ami.zip"
    file_template = 'AMI_WSJ20-Array1-{}_T10c0201.wav'

    wavs_dir = download_and_unzip(url=audio_ami_8ch_zip_url, target_dir="example_wavs")

    signal_list = [
        sf.read(os.path.join(wavs_dir, file_template.format(d + 1)))[0]
        for d in range(channels)
    ]

    # STFT
    y = np.stack(signal_list, axis=0)
    Y = stft(y, **stft_options).transpose(2, 0, 1)

    # running CPU version
    Z_cpu = cpu_wpe(
        Y,
        taps=taps,
        delay=delay,
        iterations=iterations,
        statistics_mode='full',
        psd_context=psd_context
    ).transpose(1, 2, 0)

    # running GPU version (2-3 times faster than CPU)
    Z_gpu = gpu_wpe(
        Y,
        taps=taps,
        delay=delay,
        iterations=iterations,
        statistics_mode='full',
        psd_context=psd_context
    ).transpose(1, 2, 0)

    # ISTFT
    z_cpu = istft(Z_cpu, size=stft_options['size'], shift=stft_options['shift'])
    z_gpu = istft(Z_gpu, size=stft_options['size'], shift=stft_options['shift'])

    assert np.linalg.norm(z_cpu-z_gpu) < 10e-8, \
        "signals generated by GPU implementation different than the one from CPU."

